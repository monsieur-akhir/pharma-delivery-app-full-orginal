// Ce script cr√©e un utilitaire pour diagnostiquer les probl√®mes d'authentification
const { Client } = require('pg');
const bcrypt = require('bcrypt');
require('dotenv').config({ path: '../backend/.env' });

async function diagnoseAuthenticationIssues() {
  console.log('üîç Diagnostic des probl√®mes d\'authentification...');
  
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    await client.connect();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // 1. V√©rifier la structure de la table users
    const tableCheckQuery = `
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns
      WHERE table_name = 'users'
      ORDER BY ordinal_position;
    `;
    
    const tableResult = await client.query(tableCheckQuery);
    
    console.log('\nüìã Structure de la table users:');
    console.table(tableResult.rows);
    
    // 2. V√©rifier les utilisateurs administrateurs
    const adminQuery = `
      SELECT id, username, email, phone, role, first_name, last_name, is_active, 
             password_hash IS NOT NULL AS has_password,
             LENGTH(password_hash) AS password_hash_length
      FROM users
      WHERE role IN ('ADMIN', 'PHARMACIST', 'PHARMACY_STAFF')
      ORDER BY id;
    `;
    
    const adminsResult = await client.query(adminQuery);
    
    console.log('\nüë• Utilisateurs administrateurs:');
    console.table(adminsResult.rows);
    
    // 3. V√©rifier le format des hash de mot de passe
    const passwordHashesQuery = `
      SELECT id, username, SUBSTRING(password_hash FROM 1 FOR 60) AS password_hash_sample
      FROM users
      WHERE password_hash IS NOT NULL
      LIMIT 5;
    `;
    
    const passwordResult = await client.query(passwordHashesQuery);
    
    console.log('\nüîë √âchantillons de hash de mot de passe:');
    console.table(passwordResult.rows);
    
    // 4. Tester la fonctionnalit√© de bcrypt
    console.log('\n‚öôÔ∏è Test de la fonctionnalit√© bcrypt:');
    
    const testPassword = 'test_password';
    try {
      const salt = await bcrypt.genSalt(10);
      const hash = await bcrypt.hash(testPassword, salt);
      
      console.log(`‚úÖ G√©n√©ration de hash bcrypt: Succ√®s`);
      console.log(`   Mot de passe test: "${testPassword}"`);
      console.log(`   Hash g√©n√©r√©: "${hash}"`);
      
      const validCheck = await bcrypt.compare(testPassword, hash);
      console.log(`‚úÖ V√©rification bcrypt avec mot de passe correct: ${validCheck ? 'Succ√®s' : '√âchec'}`);
      
      const invalidCheck = await bcrypt.compare('wrong_password', hash);
      console.log(`‚úÖ V√©rification bcrypt avec mot de passe incorrect: ${!invalidCheck ? 'Succ√®s (rejet√© comme pr√©vu)' : '√âchec'}`);
    } catch (error) {
      console.error(`‚ùå Erreur lors des tests bcrypt: ${error.message}`);
    }

    // 5. Proposer des solutions
    console.log('\nüîß Recommandations:');
    
    if (passwordResult.rows.some(row => !row.password_hash_sample.startsWith('$2'))) {
      console.log('‚ùå Certains hash de mot de passe semblent ne pas √™tre au format bcrypt.');
      console.log('   Solution: Assurez-vous que tous les mots de passe sont hach√©s avec bcrypt.');
    }
    
    console.log('1. V√©rifiez que le hash du mot de passe dans la base de donn√©es est au format bcrypt (commen√ßant par "$2a$", "$2b$", etc.)');
    console.log('2. Ajoutez un traitement d\'erreur plus robuste dans la m√©thode de comparaison bcrypt');
    console.log('3. Assurez-vous que la version de bcrypt est compatible avec le format des hash stock√©s');
    console.log('4. Cr√©ez un utilisateur de test avec un nouveau mot de passe pour v√©rifier le processus d\'authentification');

  } catch (error) {
    console.error(`‚ùå Erreur lors du diagnostic: ${error.message}`);
  } finally {
    await client.end();
    console.log('\n‚úÖ Diagnostic termin√©.');
  }
}

diagnoseAuthenticationIssues();

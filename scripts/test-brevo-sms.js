// Ce script teste l'envoi de SMS avec le service Brevo
require('dotenv').config();
const { BrevoSmsService } = require('../dist/notifications/services/brevo-sms.service');
const { SmsService } = require('../dist/notifications/services/sms.service');
const { ConfigService } = require('@nestjs/config');

async function testBrevoSmsService() {
  console.log('üöÄ Test du service SMS Brevo');
  console.log('=======================================================');

  // Cr√©er une instance de ConfigService simul√©e
  const configService = {
    get: (key, defaultValue) => {
      return process.env[key] || defaultValue;
    }
  };

  // Cr√©er une instance du service BrevoSms
  const brevoSmsService = new BrevoSmsService(configService);
  
  // Cr√©er une instance du service SMS principal
  const smsService = new SmsService(configService, brevoSmsService);

  // Num√©ro de t√©l√©phone de test (format international requis: +33612345678)
  const testPhoneNumber = process.env.TEST_PHONE_NUMBER || '+33600000000';

  console.log(`üì± Envoi de SMS de test √†: ${testPhoneNumber}`);

  try {
    // Test 1: Envoi SMS direct via BrevoSmsService
    console.log('\nüß™ Test 1: Envoi SMS direct via BrevoSmsService');
    const directResult = await brevoSmsService.sendSms(
      testPhoneNumber,
      'Test SMS directement via BrevoSmsService'
    );
    console.log('‚úÖ R√©sultat d\'envoi direct:');
    console.log(directResult);

    // Test 2: Envoi SMS avec template via BrevoSmsService
    console.log('\nüß™ Test 2: Envoi SMS avec template pr√©d√©fini');
    const templateResult = await brevoSmsService.sendSmsWithPresetTemplate(
      testPhoneNumber,
      'otp',
      { 
        otp: '123456', 
        expiresIn: '10 minutes'
      }
    );
    console.log('‚úÖ R√©sultat d\'envoi avec template:');
    console.log(templateResult);

    // Test 3: Envoi via SmsService avec choix explicite de fournisseur Brevo
    console.log('\nüß™ Test 3: Envoi via SmsService (fournisseur Brevo)');
    const viaServiceResult = await smsService.sendSms(
      testPhoneNumber, 
      'Test via SmsService avec fournisseur Brevo explicite',
      'brevo'
    );
    console.log('‚úÖ R√©sultat via service:');
    console.log(viaServiceResult);

    // Test 4: Envoi d'un rappel de m√©dicament
    console.log('\nüß™ Test 4: Envoi d\'un rappel de m√©dicament');
    const reminderResult = await brevoSmsService.sendMedicationReminder(
      testPhoneNumber,
      'Parac√©tamol',
      '500mg, 2 comprim√©s',
      '12h00'
    );
    console.log('‚úÖ R√©sultat d\'envoi de rappel:');
    console.log(reminderResult);

    // Test 5: Envoi d'une mise √† jour de commande
    console.log('\nüß™ Test 5: Envoi d\'une mise √† jour de commande');
    const orderResult = await brevoSmsService.sendOrderStatusUpdate(
      testPhoneNumber,
      'CMD-12345',
      'IN_TRANSIT'
    );
    console.log('‚úÖ R√©sultat d\'envoi de mise √† jour:');
    console.log(orderResult);

    console.log('\nüéâ Tests termin√©s avec succ√®s!');
  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests:');
    console.error(error);
    console.error('\nüëâ V√©rifiez que les variables d\'environnement suivantes sont d√©finies:');
    console.error('- BREVO_API_KEY_SMS: Votre cl√© API Brevo pour les SMS');
    console.error('- TEST_PHONE_NUMBER: Un num√©ro de t√©l√©phone valide pour les tests (format: +33612345678)');
  }
}

// Ex√©cuter les tests
testBrevoSmsService();

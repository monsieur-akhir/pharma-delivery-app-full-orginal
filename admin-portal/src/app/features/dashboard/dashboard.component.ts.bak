
import { Component, OnInit, OnDestroy, AfterViewInit, ViewChild, ElementRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatMenuModule } from '@angular/material/menu';
import { MatTableModule } from '@angular/material/table';
import { MatChipsModule } from '@angular/material/chips';
import { MatPaginatorModule, PageEvent } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatSelectModule } from '@angular/material/select';
import { FormsModule } from '@angular/forms';
import { Chart, registerables } from 'chart.js';
import { saveAs } from 'file-saver';
import { formatDate } from '@angular/common';
import { Observable, Subject, forkJoin, Subscription } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

import { DashboardService, DashboardStats, ChartData, AuditLog } from './dashboard.service';
import { ErrorHandlerService } from '../../core/services/error-handler.service';
import { AuthService } from '../../core/services/auth.service';
import { ApiService } from '../../core/services/api.service';
import { StatsService } from '../../core/services/api/stats.service';
import { OrderService } from '../../core/services/api/order.service';
import { PharmacyService } from '../../core/services/api/pharmacy.service';
import { UserService } from '../../core/services/api/user.service';

// Define Order interface
interface Order {
id: number;
userId: number;
items: any[];
totalPrice: number;
status: 'pending' | 'processing' | 'completed' | 'cancelled' | 'delivered';
}

interface OrderTableItem {
id: number;
customer: string;
items: number;
total: number;
status: string;
statusClass: string;
}

Chart.register(...registerables);

@Component({
selector: 'app-dashboard',
standalone: true,
imports: [
CommonModule,
FormsModule,
MatCardModule,
MatButtonModule,
MatIconModule,
MatGridListModule,
MatMenuModule,
MatTableModule,
MatChipsModule,
MatPaginatorModule,
MatProgressBarModule,
MatSnackBarModule,
MatProgressSpinnerModule,
MatSelectModule
],
templateUrl: './dashboard.component.html',
styleUrls: ['./dashboard.component.scss']
}) `<div class="dashboard-container"> <h1 class="page-title">Tableau de Bord</h1>


  <div class="dashboard-summary">
    <mat-card class="summary-card">
      <mat-card-content>
        <div class="summary-icon bg-purple">
          <mat-icon>medication</mat-icon>
        </div>
        <div class="summary-data">
          <div class="summary-value">{{ totalMedicines }}</div>
          <div class="summary-label">Médicaments</div>
        </div>
      </mat-card-content>
    </mat-card>
    
    <mat-card class="summary-card">
      <mat-card-content>
        <div class="summary-icon bg-blue">
          <mat-icon>local_shipping</mat-icon>
        </div>
        <div class="summary-data">
          <div class="summary-value">{{ activeDeliveries }}</div>
          <div class="summary-label">Livraisons actives</div>
        </div>
      </mat-card-content>
    </mat-card>
    
    <mat-card class="summary-card">
      <mat-card-content>
        <div class="summary-icon bg-green">
          <mat-icon>people</mat-icon>
        </div>
        <div class="summary-data">
          <div class="summary-value">{{ totalUsers }}</div>
          <div class="summary-label">Utilisateurs</div>
        </div>
      </mat-card-content>
    </mat-card>
    
    <mat-card class="summary-card">
      <mat-card-content>
        <div class="summary-icon bg-orange">
          <mat-icon>store</mat-icon>
        </div>
        <div class="summary-data">
          <div class="summary-value">{{ totalPharmacies }}</div>
          <div class="summary-label">Pharmacies</div>
        </div>
      </mat-card-content>
    </mat-card>
  </div>
  
  <div class="dashboard-main-content">
    <mat-card class="chart-card">
      <mat-card-header>
        <mat-card-title>Statistiques des livraisons</mat-card-title>
        <button mat-icon-button [matMenuTriggerFor]="chartMenu" aria-label="Options">
          <mat-icon>more_vert</mat-icon>
        </button>
        <mat-menu #chartMenu="matMenu">
          <button mat-menu-item>
            <mat-icon>refresh</mat-icon>
            <span>Rafraîchir</span>
          </button>
          <button mat-menu-item>
            <mat-icon>file_download</mat-icon>
            <span>Exporter</span>
          </button>
          <button mat-menu-item>
            <mat-icon>settings</mat-icon>
            <span>Paramètres</span>
          </button>
        </mat-menu>
      </mat-card-header>
      <mat-card-content>
        <div class="chart-container">
          <!-- Charts will be added here -->
          <div class="placeholder-chart">
            <div class="placeholder-text">Graphique des livraisons</div>
          </div>
        </div>
      </mat-card-content>
    </mat-card>
    
    <mat-card class="recent-orders-card">
      <mat-card-header>
        <mat-card-title>Commandes récentes</mat-card-title>
        <button mat-flat-button color="primary">Voir tout</button>
      </mat-card-header>
      <mat-card-content>
        <table mat-table [dataSource]="recentOrders" class="orders-table">
          <ng-container matColumnDef="id">
            <th mat-header-cell *matHeaderCellDef>ID</th>
            <td mat-cell *matCellDef="let order">{{ order.id }}</td>
          </ng-container>
          
          <ng-container matColumnDef="customer">
            <th mat-header-cell *matHeaderCellDef>Client</th>
            <td mat-cell *matCellDef="let order">{{ order.customer }}</td>
          </ng-container>
          
          <ng-container matColumnDef="items">
            <th mat-header-cell *matHeaderCellDef>Articles</th>
            <td mat-cell *matCellDef="let order">{{ order.items }}</td>
          </ng-container>
          
          <ng-container matColumnDef="total">
            <th mat-header-cell *matHeaderCellDef>Total</th>
            <td mat-cell *matCellDef="let order">{{ order.total }} €</td>
          </ng-container>
          
          <ng-container matColumnDef="status">
            <th mat-header-cell *matHeaderCellDef>Statut</th>
            <td mat-cell *matCellDef="let order">
              <span class="status-chip" [ngClass]="'status-' + order.statusClass">
                {{ order.status }}
              </span>
            </td>
          </ng-container>
          
          <ng-container matColumnDef="actions">
            <th mat-header-cell *matHeaderCellDef>Actions</th>
            <td mat-cell *matCellDef="let order">
              <button mat-icon-button color="primary" matTooltip="Voir les détails">
                <mat-icon>visibility</mat-icon>
              </button>
            </td>
          </ng-container>
          
          <tr mat-header-row *matHeaderRowDef="orderColumns"></tr>
          <tr mat-row *matRowDef="let row; columns: orderColumns;"></tr>
        </table>
      </mat-card-content>
    </mat-card>
  </div>
  
  <div class="dashboard-secondary-content">
    <mat-card class="stock-alerts-card">
      <mat-card-header>
        <mat-card-title>Alertes de stock</mat-card-title>
        <button mat-flat-button color="accent">Gérer</button>
      </mat-card-header>
      <mat-card-content>
        <div class="alert-list">
          <div class="alert-item">
            <div class="alert-icon warning">
              <mat-icon>warning</mat-icon>
            </div>
            <div class="alert-details">
              <div class="alert-title">Paracétamol 500mg</div>
              <div class="alert-subtitle">Stock bas (5 unités)</div>
            </div>
            <button mat-button color="primary">Commander</button>
          </div>
          
          <div class="alert-item">
            <div class="alert-icon critical">
              <mat-icon>error</mat-icon>
            </div>
            <div class="alert-details">
              <div class="alert-title">Amoxicilline 250mg</div>
              <div class="alert-subtitle">Stock épuisé</div>
            </div>
            <button mat-button color="warn">Commander</button>
          </div>
          
          <div class="alert-item">
            <div class="alert-icon warning">
              <mat-icon>warning</mat-icon>
            </div>
            <div class="alert-details">
              <div class="alert-title">Ibuprofène 200mg</div>
              <div class="alert-subtitle">Stock bas (8 unités)</div>
            </div>
            <button mat-button color="primary">Commander</button>
          </div>
          
          <div class="alert-item">
            <div class="alert-icon expiry">
              <mat-icon>schedule</mat-icon>
            </div>
            <div class="alert-details">
              <div class="alert-title">Aspirine 500mg</div>
              <div class="alert-subtitle">Expire bientôt (5 jours)</div>
            </div>
            <button mat-button color="accent">Vérifier</button>
          </div>
        </div>
      </mat-card-content>
    </mat-card>
    
    <mat-card class="activity-card">
      <mat-card-header>
        <mat-card-title>Activité récente</mat-card-title>
      </mat-card-header>
      <mat-card-content>
        <div class="activity-timeline">
          <div class="timeline-item">
            <div class="timeline-icon bg-green">
              <mat-icon>check_circle</mat-icon>
            </div>
            <div class="timeline-content">
              <div class="timeline-title">Commande livrée</div>
              <div class="timeline-subtitle">Commande #12345 livrée avec succès</div>
              <div class="timeline-time">Il y a 10 minutes</div>
            </div>
          </div>
          
          <div class="timeline-item">
            <div class="timeline-icon bg-blue">
              <mat-icon>local_shipping</mat-icon>
            </div>
            <div class="timeline-content">
              <div class="timeline-title">Nouvelle livraison</div>
              <div class="timeline-subtitle">Livraison #34567 attribuée à Michel Blanc</div>
              <div class="timeline-time">Il y a 25 minutes</div>
            </div>
          </div>
          
          <div class="timeline-item">
            <div class="timeline-icon bg-purple">
              <mat-icon>shopping_cart</mat-icon>
            </div>
            <div class="timeline-content">
              <div class="timeline-title">Nouvelle commande</div>
              <div class="timeline-subtitle">Commande #45678 reçue de Marie Lambert</div>
              <div class="timeline-time">Il y a 1 heure</div>
            </div>
          </div>
          
          <div class="timeline-item">
            <div class="timeline-icon bg-orange">
              <mat-icon>inventory</mat-icon>
            </div>
            <div class="timeline-content">
              <div class="timeline-title">Stock mis à jour</div>
              <div class="timeline-subtitle">50 unités d'Amoxicilline 500mg ajoutées</div>
              <div class="timeline-time">Il y a 2 heures</div>
            </div>
          </div>
        </div>
      </mat-card-content>
    </mat-card>
  </div>
</div>`
  `styles: [
.dashboard-container {
padding: 20px;
max-width: 100%;
}
.page-title {
  margin-bottom: 20px;
  color: #333;
  font-weight: 500;
}

.dashboard-summary {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(230px, 1fr));
  gap: 20px;
  margin-bottom: 20px;
}

.summary-card {
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.summary-card mat-card-content {
  display: flex;
  align-items: center;
  padding: 10px;
}

.summary-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  margin-right: 16px;
}

.summary-icon mat-icon {
  font-size: 30px;
  width: 30px;
  height: 30px;
  color: white;
}

.bg-purple {
  background-color: #7e57c2;
}

.bg-blue {
  background-color: #1e88e5;
}

.bg-green {
  background-color: #43a047;
}

.bg-orange {
  background-color: #fb8c00;
}

.summary-data {
  flex: 1;
}

.summary-value {
  font-size: 24px;
  font-weight: bold;
  color: #333;
}

.summary-label {
  color: #777;
  font-size: 14px;
}

.dashboard-main-content {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
  margin-bottom: 20px;
}

.chart-card, .recent-orders-card {
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.chart-card mat-card-header, .recent-orders-card mat-card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px;
}

.chart-container {
  height: 300px;
  padding: 16px;
}

.placeholder-chart {
  height: 100%;
  background-color: #f5f5f5;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.placeholder-text {
  color: #999;
  font-size: 18px;
}

.orders-table {
  width: 100%;
}

.status-chip {
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
}

.status-completed {
  background-color: #e8f5e9;
  color: #43a047;
}

.status-processing {
  background-color: #e3f2fd;
  color: #1976d2;
}

.status-pending {
  background-color: #fff3e0;
  color: #ff9800;
}

.dashboard-secondary-content {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
}

.stock-alerts-card, .activity-card {
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.stock-alerts-card mat-card-header, .activity-card mat-card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px;
}

.alert-list {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.alert-item {
  display: flex;
  align-items: center;
  padding: 8px;
  border-radius: 8px;
  background-color: #f5f5f5;
}

.alert-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  margin-right: 12px;
}

.alert-icon mat-icon {
  color: white;
}

.alert-icon.warning {
  background-color: #ff9800;
}

.alert-icon.critical {
  background-color: #f44336;
}

.alert-icon.expiry {
  background-color: #7e57c2;
}

.alert-details {
  flex: 1;
}

.alert-title {
  font-weight: 500;
  color: #333;
}

.alert-subtitle {
  color: #666;
  font-size: 12px;
}

.activity-timeline {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.timeline-item {
  display: flex;
  position: relative;
}

.timeline-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  margin-right: 12px;
  z-index: 1;
}

.timeline-icon mat-icon {
  color: white;
  font-size: 20px;
  width: 20px;
  height: 20px;
}

.timeline-content {
  flex: 1;
}

.timeline-title {
  font-weight: 500;
  color: #333;
}

.timeline-subtitle {
  color: #666;
  font-size: 14px;
}

.timeline-time {
  color: #999;
  font-size: 12px;
  margin-top: 4px;
}

@media (max-width: 1200px) {
  .dashboard-main-content, .dashboard-secondary-content {
    grid-template-columns: 1fr;
  }
}
@media (max-width: 600px) {
  .dashboard-summary {
    grid-template-columns: 1fr;
  }
}

\`]
})
export class DashboardComponent implements OnInit, OnDestroy, AfterViewInit {
// Statistiques
totalMedicines = 0;
activeDeliveries = 0;
totalUsers = 0;
totalPharmacies = 0;
totalRevenue = 0;
dailyGrowth = 0;

// Graphiques
@ViewChild('ordersChart') ordersChartRef!: ElementRef;
@ViewChild('revenueChart') revenueChartRef!: ElementRef;
@ViewChild('usersChart') usersChartRef!: ElementRef;

// Période sélectionnée pour les données
selectedPeriod: 'daily' | 'weekly' | 'monthly' | 'yearly' = 'weekly';

// Tableaux de données
recentOrders: any[] = [];
orderColumns = ['id', 'customer', 'items', 'total', 'status', 'actions'];

// Contrôle de chargement
private subscriptions = new Subscription();
isLoading = true;
loadingCharts = true;

constructor(
private api: ApiService,
private statsService: StatsService,
private orderService: OrderService,
private pharmacyService: PharmacyService,
private userService: UserService,
private errorHandler: ErrorHandlerService
) { }

ngOnInit(): void {
this.loadDashboardData();
this.loadRecentOrders();
}

ngAfterViewInit(): void {
setTimeout(() => {
this.loadChartData();
}, 100);
}

ngOnDestroy(): void {
this.subscriptions.unsubscribe();
}

onPeriodChange(): void {
this.loadDashboardData();
this.loadChartData();
}

loadDashboardData(): void {
this.isLoading = true;

// Utilisation de forkJoin pour charger plusieurs sources de données en parallèle
const dashboardSub = forkJoin({
  stats: this.statsService.getDashboardStats(this.selectedPeriod),
  pharmacies: this.pharmacyService.getPharmacies(1, 1),
  medicines: this.api.orders.getOrders(1, 1) // Simulé, besoin d'un service médicament
}).subscribe({
  next: (results) => {
    const stats = results.stats;
    
    this.totalUsers = stats.totalUsers || 0;
    this.activeDeliveries = stats.pendingOrders || 0;
    this.totalPharmacies = results.pharmacies.total || 0;
    this.totalMedicines = 1245; // Simulé, à remplacer par un service médicament
    this.totalRevenue = stats.totalRevenue || 0;
    
    // Calculer la croissance journalière (simulé)
    this.dailyGrowth = stats.data?.growthRate || 2.5;
    
    this.isLoading = false;
  },
  error: (error) => {
    this.errorHandler.handleError(error);
    this.isLoading = false;
  }
});

this.subscriptions.add(dashboardSub);
```

}

loadChartData(): void {
this.loadingCharts = true;

```
const chartSub = forkJoin({
  orderStats: this.statsService.getOrdersStats(this.selectedPeriod),
  revenueStats: this.statsService.getRevenueStats(this.selectedPeriod),
  userStats: this.statsService.getUsersStats(this.selectedPeriod)
}).subscribe({
  next: (results) => {
    this.renderOrdersChart(results.orderStats);
    this.renderRevenueChart(results.revenueStats);
    this.renderUsersChart(results.userStats);
    this.loadingCharts = false;
  },
  error: (error) => {
    this.errorHandler.handleError(error);
    this.loadingCharts = false;
  }
});

this.subscriptions.add(chartSub);
```

}

renderOrdersChart(data: any): void {
if (!this.ordersChartRef) return;

```
// Format des données (à adapter selon le format réel de l'API)
const labels = data.timeline?.map((item: any) => item.date) || 
              ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'];

const completedData = data.timeline?.map((item: any) => item.completed) || 
                     [12, 19, 15, 8, 22, 14, 11];

const pendingData = data.timeline?.map((item: any) => item.pending) || 
                   [5, 8, 7, 9, 6, 3, 5];

const chart = new Chart(this.ordersChartRef.nativeElement, {
  type: 'bar',
  data: {
    labels: labels,
    datasets: [
      {
        label: 'Commandes terminées',
        data: completedData,
        backgroundColor: 'rgba(75, 192, 192, 0.6)',
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 1
      },
      {
        label: 'Commandes en cours',
        data: pendingData,
        backgroundColor: 'rgba(255, 205, 86, 0.6)',
        borderColor: 'rgba(255, 205, 86, 1)',
        borderWidth: 1
      }
    ]
  },
  options: {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      y: {
        beginAtZero: true
      }
    }
  }
});
```

}

renderRevenueChart(data: any): void {
if (!this.revenueChartRef) return;

```
// Format des données (à adapter selon le format réel de l'API)
const labels = data.timeline?.map((item: any) => item.date) || 
              ['Jan', 'Fév', 'Mars', 'Avril', 'Mai', 'Juin', 'Juil'];

const revenueData = data.timeline?.map((item: any) => item.amount) || 
                   [3500, 4200, 3800, 5100, 4800, 5700, 6200];

const chart = new Chart(this.revenueChartRef.nativeElement, {
  type: 'line',
  data: {
    labels: labels,
    datasets: [
      {
        label: 'Revenus (€)',
        data: revenueData,
        fill: true,
        backgroundColor: 'rgba(54, 162, 235, 0.2)',
        borderColor: 'rgba(54, 162, 235, 1)',
        borderWidth: 2,
        tension: 0.4
      }
    ]
  },
  options: {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      y: {
        beginAtZero: true
      }
    }
  }
});
```

}

renderUsersChart(data: any): void {
if (!this.usersChartRef) return;

```
// Format des données (à adapter selon le format réel de l'API)
const userData = data.userTypes || {
  patients: 62,
  pharmacists: 15,
  admins: 8,
  deliveryPersonnel: 25
};

const chart = new Chart(this.usersChartRef.nativeElement, {
  type: 'doughnut',
  data: {
    labels: ['Patients', 'Pharmaciens', 'Administrateurs', 'Livreurs'],
    datasets: [{
      data: [
        userData.patients, 
        userData.pharmacists, 
        userData.admins, 
        userData.deliveryPersonnel
      ],
      backgroundColor: [
        'rgba(75, 192, 192, 0.6)',
        'rgba(153, 102, 255, 0.6)',
        'rgba(255, 159, 64, 0.6)',
        'rgba(255, 99, 132, 0.6)'
      ],
      borderColor: [
        'rgba(75, 192, 192, 1)',
        'rgba(153, 102, 255, 1)',
        'rgba(255, 159, 64, 1)',
        'rgba(255, 99, 132, 1)'
      ],
      borderWidth: 1
    }]
  },
  options: {
    responsive: true,
    maintainAspectRatio: false
  }
});
```

}

loadRecentOrders(): void {
const orderSub = this.orderService.getOrders(1, 5)
.subscribe({
next: (data) => {
this.recentOrders = data.orders.map(order => ({
id: order.id,
customer: `Client #${order.userId}`,
items: order.items.length,
total: order.totalPrice,
status: this.getStatusLabel(order.status),
statusClass: this.getStatusClass(order.status)
}));
},
error: (error) => this.errorHandler.handleError(error)
});

```
this.subscriptions.add(orderSub);
```

}

getStatusLabel(status: Order\['status']): string {
const labels = {
'pending': 'En attente',
'processing': 'En traitement',
'completed': 'Livré',
'cancelled': 'Annulé',
'delivered': 'Livré'
};
return labels\[status] || status;
}

getStatusClass(status: string): string {
return status;
}
}
